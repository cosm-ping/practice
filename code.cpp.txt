#include <iostream> 
using namespace std;
void quickSort(int arr[], int left, int right) {
    int i = left, j = right;
    int tmp;
    int pivot = arr[(left + right) / 2]; 
 
    while (i <= j) {
        while (arr[i] < pivot)
            i++;
        while (arr[j] > pivot)
            j--;
        if (i <= j) {
            tmp = arr[i];
            arr[i] = arr[j];
            arr[j] = tmp;
            i++;
            j--;
        }
    };

    if (left < j)
        quickSort(arr, left, j);
    if (i < right)
        quickSort(arr, i, right);
}
void merge(int arr[], int left, int mid, int right) {
    int i, j, k;
    int n1 = mid - left + 1;
    int n2 = right - mid;
 
    int L[n1], R[n2];
 
    for (i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[mid + 1 + j];
    i = 0; 
    j = 0; 
    k = left; 
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        }
        else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
 
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }
 
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
 
        merge(arr, left, mid, right);
    }
}
int main()
{
    cout << "быстрая сортировка" << endl;
    int arr[5] = { 5, 3, 1, 4, 2 };
     for (int i = 0; i <5; i++)
{
cout << arr[i] << '\t';
} 
cout << endl;
    quickSort(arr, 0, 5);
    for (int i = 0; i <5; i++)
{
cout << arr[i] << '\t';
}

cout <<endl << "сортировка слиянием" << endl;
    int arr2[5] = { 5, 3, 1, 4, 2 };
     for (int i = 0; i <5; i++)
{
cout << arr2[i] << '\t';
} 
cout << endl;
   mergeSort(arr2, 0, 5);
    for (int i = 0; i <5; i++)
{
cout << arr2[i] << '\t';
}
    return 0;
}
